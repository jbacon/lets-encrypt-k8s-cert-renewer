apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    #time: {{ .Release.Time.Seconds | quote }}
spec:
  schedule: {{ .Values.cron }}
  startingDeadlineSeconds: 120
  concurrencyPolicy: Forbid
  suspend: false
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      name: {{ template "fullname" . }}
      namespace: {{ .Release.Namespace }}
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
    spec:
      activeDeadlineSeconds: 600
      completions: 1
      parallelism: 1
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          dnsPolicy: ClusterFirst
          terminationGracePeriodSeconds: 300
          {{- if eq .Values.serviceAccount "True" }}
          serviceAccountName: {{ template "fullname" . }}
          {{- else if .Values.serviceAccount }}
          serviceAccountName: {{ .Values.serviceAccount }}
          {{- else }}
          {{- end }}
          containers:
            - name: certbot
              image: certbot/certbot
              imagePullPolicy: Always
              args:
                - certonly
                - --cert-path=/root/certs/cert.pem
                - --key-path=/root/certs/privkey.pem
                - --fullchain-path=/root/certs/fullchain.pem
                - --chain-path=/root/certs/chain.pem
                - --config-dir=/root/certbot/config/
                - --work-dir=/root/certbot/work/
                - --logs-dir=/root/certbot/logs/
                - --non-interactive
                - --keep-until-expiring
                - --manual
                - --manual-auth-hook=/root/hooks/auth.sh
                - --manual-cleanup-hook=/root/hooks/cleanup.sh
                - --manual-public-ip-logging-ok
                - --deploy-hook /root/hooks/deploy.sh
                - --agree-tos
                - --email={{ .Values.email }}
                {{- range .Values.domains }}
                - --domain={{ . }}
                {{- end }}
              env:
                - name: CERT_SECRET_NAME
                  value: {{ .Values.certSecret }}
                {{- if .Values.hookConfigs.kubeTls }}
                - name: KUBE_ACME_SECRET_NAME
                  value: {{ .Values.hookConfigs.kubeTls.acmeSecret }}
                - name: KUBE_TLS_SECRET_NAME
                  value: {{ .Values.hookConfigs.kubeTls.tlsSecret }}
                {{- end }}
                {{- if .Values.hookConfigs.awsS3CloudFront }}
                - name: AWS_CLOUDFORNT_DISTRIBUTION_ID
                  value: {{ .Values.hookConfigs.awsS3CloudFront.distributionId }}
                - name: AWS_CLOUDFORNT_INVALIDATE_DISTRIBUTION
                  value: {{ .Values.hookConfigs.awsS3CloudFront.invalidateDistribution }}
                - name: AWS_ACM_CERT_ARN
                  value: {{ .Values.hookConfigs.awsS3CloudFront.certManagerCertArn }}
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.hookConfigs.awsS3CloudFront.accessKeyId.secret.name }}
                      key: {{ .Values.hookConfigs.awsS3CloudFront.accessKeyId.secret.key }}
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.hookConfigs.awsS3CloudFront.secretAccessKey.secret.name }}
                      key: {{ .Values.hookConfigs.awsS3CloudFront.secretAccessKey.secret.key }}
                - name: AWS_DEFAULT_REGION
                  value: {{ .Values.hookConfigs.awsS3CloudFront.region }}
                {{- end }}
              volumeMounts:
                - name: certs
                  mountPath: /root/certs/
                - name: hooks
                  mountPath: /root/hooks/
          volumes:
            - name: certs
              secret:
                secretName: {{ .Values.certSecret }}
            - name: hooks
              configMap:
                {{- if .Values.hooksConfigmap }}
                name: {{ .Values.hooksConfigmap | default "" }}
                {{- else }}
                name: {{ template "fullname" . }}
                {{- end }}
                defaultMode: 0744